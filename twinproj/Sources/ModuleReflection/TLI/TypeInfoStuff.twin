[ Description ("Caching list of ITypeInfos in a given TypeLib") ]
Private Class TypeInfoCollection
    Public ReadOnly typeLib As ITypeLib
    Private ReadOnly typeInfoCount As long
    Private typeInfos As Dictionary = New Dictionary
    
    Public Sub New(ByVal wrappedITypeLib As ITypeLib)
        Set typeLib = wrappedITypeLib
        typeInfoCount = typeLib.GetTypeInfoCount
    End Sub
    
    Private Function tryGenerateNext(ByRef outITypeInfo As ITypeInfo) As Boolean
        Static i As Long 'zero indexed
        Logger.Log DebugLevel, printf("tryGenerate ti i={}", i)
        If i >= typeInfoCount Then Return False
        
        'if there are errors here we want to know about them
        Dim rawITypeInfo As ITypeInfo
        Set rawITypeInfo = TypeLibHelper.getITypeInfoByIndex(typeLib, i)
        Logger.Log TraceLevel, "Generated TypeInfo"
        i = i + 1

        Set outITypeInfo = rawITypeInfo
        Return True
    End Function

    Public Sub Find(ByVal name As String, ByRef outTI As ITypeInfo)
        Logger.Log DebugLevel, "Finding: " & name
        Do While Not typeInfos.Exists(name)
            Logger.Log TraceLevel, "Loop"
            Dim wrappedTI As ITypeInfo
            'Exit early if not found because no more left to try
            If Not tryGenerateNext(wrappedTI) Then Err.Raise 5, Description:="That name can't be found"
            Dim tiName As String = TypeInfoHelper.getModName(wrappedTI)
            Logger.Log DebugLevel, "TypeInfos: " & Join(typeInfos.Keys, ", ")
            Logger.Log DebugLevel, printf("found ti for {} @{}", tiName, ObjPtr(wrappedTI))

            'Dict requires variants, this does not change the interface pointer
            Dim anotherInterface As Variant
            Set anotherInterface = wrappedTI
            Logger.Log TraceLevel, "convert to variant"
            typeInfos.Add tiName, anotherInterface
            Logger.Log DebugLevel, printf("Added {} @ {}", tiName, ObjPtr(typeInfos(tiName)))
        Loop
        Logger.Log DebugLevel, "TypeInfos: " & Join(typeInfos.Keys, ", ")
        Logger.Log InfoLevel, "Found it!"
        
        'TODO there is no way to cache the TI pointers AND return them without QI unless pointer tricks are used
        'So see if this pre-QI TypeInfo is even the private one ExtendedTL would return
        'Then decide between a second stage ExtendedTypeLib::GetTypeInfo
        'Or using pointer tricks here
        'Bearing in mind memory leaks vs overhead regenerating the ITypeInfo
        Set outTI = typeInfos(tiName)
    End Sub

End Class

[ Description ("ITypeInfo parsing/navigation without TLBINF32.dll. We don't want that because (1) It's no longer included in Windows, and (2) It ignores the type info marked as 'private', which we want to see") ]
Module TypeInfoHelper
	'Created by JAAFAR
    'Src: https://www.vbforums.com/showthread.php?846947-RESOLVED-Ideas-Wanted-ITypeInfo-like-Solution&p=5449985&viewfull=1#post5449985
    'Modified by wqweto 2020 (clean up)
    'Modified by Greedo 2022 (refactor)
    'Modified by Greedo Oct 2022 (convert to twinBASIC)
    
    Public Enum KnownMemberIDs
        MEMBERID_NIL = -1
    End Enum
    
    [ Description ("Returns a map of funcName:dispid given a certain ITypeInfo without TLBINF32.dll") ]
    Public Function GetFuncDispidFromTypeInfo(ByVal ITypeInfo As ITypeInfo) As Scripting.Dictionary
        Dim attrs As TYPEATTR
        attrs = TypeInfoHelper.getAttrs(ITypeInfo)

        Dim result As Scripting.Dictionary
        Set result = New Scripting.Dictionary
        result.CompareMode = TextCompare 'so we can look names up in a case insensitive manner
        
        Dim funcIndex As Long
        For funcIndex = 0 To attrs.cFuncs - 1
            Dim funcDescriptior As FUNCDESC
            funcDescriptior = getFuncDesc(ITypeInfo, funcIndex)
            Dim funcName As String
            funcName = getFuncNameFromDescriptor(ITypeInfo, funcDescriptior)
            With funcDescriptior
                Logger.Log InfoLevel, funcName & vbTab & Switch( _
                    .invkind = vbMethod, "VbMethod", _
                    .invkind = vbGet, "VbGet", _
                    .invkind = vbLet, "VbLet", _
                    .invkind = vbSet, "VbSet" _
                    ) & "@" & .memid
                
                'property get/set all have the same dispid so only need to be here once
                If Not result.Exists(funcName) Then
                    result.Add funcName, .memid
                ElseIf result(funcName) <> .memid Then
                    Err.Raise 5, Description:=funcName & "is already associated with another dispid"
                Else
                Assert .invkind <> vbMethod, "this method & dispid should not appear twice"
                End If
                
            End With
            funcName = vbNullString
        Next
        Set GetFuncDispidFromTypeInfo = result
    End Function

    Public Function getFuncNameFromDescriptor(ByVal ITypeInfo As ITypeInfo, ByRef inFuncDescriptor As FUNCDESC) As String
        getFuncNameFromDescriptor = getDocumentation(ITypeInfo, inFuncDescriptor.memid)
    End Function

    Public Function getModName(ByVal ITypeInfo As ITypeInfo) As String
        getModName = getDocumentation(ITypeInfo, KnownMemberIDs.MEMBERID_NIL)
    End Function
    
    Private Function getDocumentation(ByVal ITypeInfo As ITypeInfo, ByVal memid As DISPID) As String
        ITypeInfo.GetDocumentation memid, getDocumentation, vbNullString, 0&, vbNullString
    End Function

    Public Function getAttrs(ByVal ITypeInfo As ITypeInfo) As TYPEATTR
        Dim pTypeAttr As LongPtr = ITypeInfo.GetTypeAttr

        'make a local copy of the data so we can safely release the reference to the type attrs object
        'REVIEW Is it safe? Does this make the info in the attrs structure invalid?
        CopyMemory getAttrs, ByVal pTypeAttr, LenB(getAttrs)
        
        ITypeInfo.ReleaseTypeAttr pTypeAttr
        pTypeAttr = NULL_PTR 'good practice to null released pointers so we don't accidentally use them
    End Function

    Public Function getFuncDesc(ByVal ITypeInfo As ITypeInfo, ByVal index As Long) As FUNCDESC
        Dim pFuncDesc As LongPtr = ITypeInfo.GetFuncDesc(index)
        
        'logic same as in tryGetAttrs
        CopyMemory getFuncDesc, ByVal pFuncDesc, LenB(getFuncDesc)
        
        ITypeInfo.ReleaseFuncDesc pFuncDesc
        pFuncDesc = NULL_PTR
    End Function
End Module