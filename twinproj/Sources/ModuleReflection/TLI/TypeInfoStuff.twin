Private Class TypeInfoCollection
    Public ReadOnly typeLib As ITypeLib
    Private ReadOnly typeInfoCount As long
    Private typeInfos As KeyedCollection = New KeyedCollection
    
    
    Public Sub New(ByVal wrappedITypeLib As ITypeLib)
        Set typeLib = wrappedITypeLib
        typeInfoCount = getTypeInfoCount(typeLib)
    End Sub
    

    Private Function tryGenerateNext(ByRef outITypeInfo As ITypeInfo) As Boolean
        Static i As Long 'zero indexed
        Logger.Log DebugLevel, printf("tryGenerate ti {}", i)
        If i >= typeInfoCount Then Return False
        
        'if there are errors here we want to know about them
        Dim rawITypeInfo As ITypeInfo
        Set rawITypeInfo = TypeLibHelper.getITypeInfoByIndex(typeLib, i)
        i = i + 1

        Set outITypeInfo = rawITypeInfo
        Return True
    End Function



    Public Function Find(ByVal name As String) As ITypeInfo
        Logger.Log DebugLevel, "Finding: " & name
        Do While Not typeInfos.Exists(name)
            Logger.Log TraceLevel, "Loop"
            Dim wrappedTI As ITypeInfo
            If Not tryGenerateNext(wrappedTI) Then Err.Raise 5, Description:="That name can't be found"
            Dim tiName As String = TypeInfoHelper.getModName(wrappedTI)
            Logger.Log DebugLevel, "Dict: " & Join(typeInfos.Keys, ", ")
            Logger.Log DebugLevel, printf("found ti for {} @{}", tiName, ObjPtr(wrappedTI))
            'Logger.Log InfoLevel, printf("Got a thing '{}'", TypeName(wrappedTI))
            'Logger.Log InfoLevel, "Dict is called " & TypeName(typeInfos)
            Logger.Log TraceLevel, "Just here"
            ' typeInfos.Item("foo") = "bar"
            ' Logger.Log TraceLevel, "Added foobar"
            Dim anotherInterface As Variant
            Set anotherInterface = wrappedTI
            Logger.Log TraceLevel, "convert to variant"
            typeInfos.Add tiName, anotherInterface
            Logger.Log TraceLevel, "Added"
        Loop
        Logger.Log DebugLevel, "Found it!"
        Logger.Log DebugLevel, "Dict: " & Join(typeInfos.Keys, ", ")
        Dim result As Variant = typeInfos.Item(name)
        Return result
    End Function

End Class