
' 'TODO tidy this up
' '    MIDL_INTERFACE ("00020402-0000-0000-C000-000000000046")
' 'ITypeLib:      Public IUnknown
' '0      HRESULT  QueryInterface ([in] REFIID riid, [out] void **ppvObject)
' '1      ULONG    AddRef ()
' '2      ULONG    Release ()
' '3      UINT     GetTypeInfoCount( void) = 0;
' '4      HRESULT  GetTypeInfo(
' '            /* [in] */ UINT index,
' '            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo) = 0;
' '
' '        virtual HRESULT STDMETHODCALLTYPE GetTypeInfoType(
' '            /* [in] */ UINT index,
' '            /* [out] */ __RPC__out TYPEKIND *pTKind) = 0;
' '
' '        virtual HRESULT STDMETHODCALLTYPE GetTypeInfoOfGuid(
' '            /* [in] */ __RPC__in REFGUID guid,
' '            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTinfo) = 0;
' '
' '        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetLibAttr(
' '            /* [out] */ TLIBATTR **ppTLibAttr) = 0;
' '
' '        virtual HRESULT STDMETHODCALLTYPE GetTypeComp(
' '            /* [out] */ __RPC__deref_out_opt ITypeComp **ppTComp) = 0;
' '
' '        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetDocumentation(
' '            /* [in] */ INT index,
' '            /* [annotation][out] */
' '            _Outptr_opt_  BSTR *pBstrName,
' '            /* [annotation][out] */
' '            _Outptr_opt_  BSTR *pBstrDocString,
' '            /* [out] */ DWORD *pdwHelpContext,
' '            /* [annotation][out] */
' '            _Outptr_opt_  BSTR *pBstrHelpFile) = 0;
' '
' '        virtual /* [local] */ HRESULT STDMETHODCALLTYPE IsName(
' '            /* [annotation][out][in] */
' '            __RPC__inout  LPOLESTR szNameBuf,
' '            /* [in] */ ULONG lHashVal,
' '            /* [out] */ BOOL *pfName) = 0;
' '
' '        virtual /* [local] */ HRESULT STDMETHODCALLTYPE FindName(
' '            /* [annotation][out][in] */
' '            __RPC__inout  LPOLESTR szNameBuf,
' '            /* [in] */ ULONG lHashVal,
' '            /* [length_is][size_is][out] */ ITypeInfo **ppTInfo,
' '            /* [length_is][size_is][out] */ MEMBERID *rgMemId,
' '            /* [out][in] */ USHORT *pcFound) = 0;
' '
' '        virtual /* [local] */ void STDMETHODCALLTYPE ReleaseTLibAttr(
' '            /* [in] */ TLIBATTR *pTLibAttr) = 0;
' '
' '    };

' Public Type ITypeLibVTable
'     IUnknown As IUnknownVTable
'     GetTypeInfoCount As LongPtr
'     GetTypeInfo As LongPtr
'     GetTypeInfoType As LongPtr
'     GetTypeInfoOfGuid As LongPtr
'     GetLibAttr As LongPtr
'     GetTypeComp As LongPtr
'     GetDocumentation As LongPtr
'     IsName As LongPtr
'     FindName As LongPtr
'     ReleaseTLibAttr As LongPtr
' End Type: Public ITypeLibVTable As ITypeLibVTable


[ InterfaceId ("00020402-0000-0000-C000-000000000046") ]
Interface ITypeLib Extends IUnknown
    [ PreserveSig ]
    Function GetTypeInfoCount() As Long
    Sub GetTypeInfo(ByVal index As Long, ByRef outTI As ITypeInfo)
    Sub DummyGetTypeInfoType()
    Sub DummyGetTypeInfoOfGuid()
    Sub DummyGetLibAttr()
    Sub GetTypeComp()

'        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetDocumentation(
'            /* [in] */ INT index,
'            /* [annotation][out] */
'            _Outptr_opt_  BSTR *pBstrName,
'            /* [annotation][out] */
'            _Outptr_opt_  BSTR *pBstrDocString,
'            /* [out] */ DWORD *pdwHelpContext,
'            /* [annotation][out] */
'            _Outptr_opt_  BSTR *pBstrHelpFile) = 0;
    Sub GetDocumentation(ByVal memid As DISPID, ByRef outName As String, Optional ByVal pBstrDocString As LongPtr = NULL_PTR, Optional ByVal pdwHelpContext As LongPtr = NULL_PTR, Optional ByVal pBstrHelpFile As LongPtr = NULL_PTR)
    Sub DummyIsName()
    'HRESULT FindName(
    '  [in, out] LPOLESTR  szNameBuf,
    '  [in]      ULONG     lHashVal,
    '  [out]     ITypeInfo **ppTInfo,
    '  [out]     MEMBERID  *rgMemId,
    '  [in, out] USHORT * pcFound
    ');
    Sub FindName(ByVal szNameBuf As LongPtr, ByVal lHashVal As Long, ByRef outTypeInfoArrayFirst As ITypeInfo, ByRef outMemIDArrayFirst As Long, ByRef pcFound As Integer)
    Sub DummyReleaseTLibAttr()
End Interface


' '[ITypeInfo](https://github.com/tpn/winsdk-10/blob/master/Include/10.0.16299.0/um/OAIdl.h#L2683) extends IUnknown
' '0      HRESULT  QueryInterface ([in] REFIID riid, [out] void **ppvObject)
' '1      ULONG    AddRef ()
' '2      ULONG    Release ()
' '3      HRESULT  GetTypeAttr([out] TYPEATTR **ppTypeAttr )
' '4      HRESULT  GetTypeComp([out] ITypeComp **ppTComp )
' '5      HRESULT  GetFuncDesc([in] UINT index, [out] FUNCDESC **ppFuncDesc)
' '6      HRESULT  GetVarDesc([in] UINT index, [out] VARDESC **ppVarDesc)
' '7      HRESULT  GetNames([in] MEMBERID memid, [out] BSTR *rgBstrNames, [in] UINT cMaxNames, [out] UINT *pcNames)
' '8      HRESULT  GetRefTypeOfImplType( [in] UINT index, [out] HREFTYPE *pRefType)
' '9      HRESULT  GetImplTypeFlags( [in] UINT index, [out] INT *pImplTypeFlags)
' '10     HRESULT  GetIDsOfNames( [in] LPOLESTR *rgszNames, [in] UINT cNames, [out] MEMBERID *pMemId)
' '11     HRESULT  Invoke( [in] PVOID pvInstance, [in] MEMBERID memid, [in] WORD wFlags, [out][in] DISPPARAMS *pDispParams, [out] VARIANT *pVarResult, [out] EXCEPINFO *pExcepInfo, [out] UINT *puArgErr)
' '12     HRESULT  GetDocumentation( [in] MEMBERID memid, [out] BSTR *pBstrName, [out] BSTR *pBstrDocString, [out] DWORD *pdwHelpContext, [out] BSTR *pBstrHelpFile)
' '13     HRESULT  GetDllEntry( [in] MEMBERID memid, [in] INVOKEKIND invKind, [out] BSTR *pBstrDllName, [out] BSTR *pBstrName, [out] WORD *pwOrdinal)
' '14     HRESULT  GetRefTypeInfo( [in] HREFTYPE hRefType, [out] ITypeInfo **ppTInfo)
' '15     HRESULT  AddressOfMember( [in] MEMBERID memid, [in] INVOKEKIND invKind, [out] PVOID *ppv)
' '16     HRESULT  CreateInstance( [in] IUnknown *pUnkOuter, [in] REFIID riid, [out] PVOID *ppvObj)
' '17     HRESULT  GetMops( [in] MEMBERID memid, [out] BSTR *pBstrMops)
' '18     HRESULT  GetContainingTypeLib( [out] ITypeLib **ppTLib, [out] UINT *pIndex)
' '19     void     ReleaseTypeAttr( [in] TYPEATTR *pTypeAttr)
' '20     void     ReleaseFuncDesc( [in] FUNCDESC *pFuncDesc)
' '21     void     ReleaseVarDesc( [in] VARDESC *pVarDesc)
' Public Type ITypeInfoVTable
'     IUnknown As IUnknownVTable
'     GetTypeAttr As LongPtr
'     GetTypeComp As LongPtr
'     GetFuncDesc As LongPtr
'     GetVarDesc As LongPtr
'     GetNames As LongPtr
'     GetRefTypeOfImplType As LongPtr
'     GetImplTypeFlags As LongPtr
'     GetIDsOfNames As LongPtr
'     Invoke As LongPtr
'     GetDocumentation As LongPtr
'     GetDllEntry As LongPtr
'     GetRefTypeInfo As LongPtr
'     AddressOfMember As LongPtr
'     CreateInstance As LongPtr
'     GetMops As LongPtr
'     GetContainingTypeLib As LongPtr
'     ReleaseTypeAttr As LongPtr
'     ReleaseFuncDesc As LongPtr
'     ReleaseVarDesc As LongPtr
' End Type: Public ITypeInfoVTable As ITypeInfoVTable



[ InterfaceId ("00020401-0000-0000-C000-000000000046") ]
Interface ITypeInfo Extends IUnknown

    'HRESULT  GetTypeAttr([out] TYPEATTR **ppTypeAttr )
    Sub GetTypeAttr(ByRef outpTypeAttr As LongPtr)
    Sub DummyGetTypeComp()
    'HRESULT  GetFuncDesc([in] UINT index, [out] FUNCDESC **ppFuncDesc)
    Sub GetFuncDesc(ByVal index As Long, ByRef outpFuncDesc As LongPtr)
    Sub DummyGetVarDesc()
    Sub DummyGetNames()
    Sub DummyGetRefTypeOfImplType()
    Sub DummyGetImplTypeFlags()
    Sub DummyGetIDsOfNames()
    Sub DummyInvoke()
    'HRESULT  GetDocumentation( [in] MEMBERID memid, [out] BSTR *pBstrName, [out] BSTR *pBstrDocString, [out] DWORD *pdwHelpContext, [out] BSTR *pBstrHelpFile)
    Sub GetDocumentation(ByVal memid As DISPID, ByRef outName As String, Optional ByVal pBstrDocString As LongPtr = NULL_PTR, Optional ByVal pdwHelpContext As LongPtr = NULL_PTR, Optional ByVal pBstrHelpFile As LongPtr = NULL_PTR)
    Sub DummyGetDllEntry()
    Sub DummyGetRefTypeInfo()
    Sub DummyAddressOfMember()
    Sub DummyCreateInstance()
    Sub DummyGetMops()
    Sub DummyGetContainingTypeLib()
    'void ITypeInfo::ReleaseTypeAttr( [in] TYPEATTR *pTypeAttr)
    [ PreserveSig ]
    Sub ReleaseTypeAttr(ByVal pTypeAttr As LongPtr)
    [ PreserveSig ]
    'void     ReleaseFuncDesc( [in] FUNCDESC *pFuncDesc)
    Sub ReleaseFuncDesc(ByVal pFuncDesc As LongPtr)
    Sub DummyReleaseVarDesc()
End Interface

' Private Class TypeInfoCachingWrapper
'     Public ReadOnly ITypeInfo As ITypeInfo

'     Public Property Get name() As String
'         name = getModName(ITypeInfo)
'     End Property

'     Private Function attrs() As TYPEATTR
'         Static result As TYPEATTR
'         'check if already set
'         If result.aGUID.Data1 = 0 Then result = getAttrs(ITypeInfo)
'         attrs = result
'     End Function
' End Class

Module TypeLibHelper
    Public Function getITypeInfoByIndex(ByVal ITypeLib As ITypeLib, ByVal index As Long) As ITypeInfo
        ITypeLib.GetTypeInfo(index, getITypeInfoByIndex)
    End Function

    Public Function getTypeInfoCount(ByVal ITypeLib As ITypeLib) As Long
    'TODO: assert not nothing
        getTypeInfoCount = ITypeLib.GetTypeInfoCount
    End Function

    Public Function getProjName(ByVal ITypeLib As ITypeLib) As String
        Logger.Log DebugLevel, "GET PROJ NAME for " & ObjPtr(ITypeLib)
        getProjName = getDocumentation(ITypeLib, KnownMemberIDs.MEMBERID_NIL)
    End Function

    Private Function getDocumentation(ByVal ITypeLib As ITypeLib, ByVal memid As DISPID) As String
        ITypeLib.GetDocumentation memid, getDocumentation
    End Function
End Module

[ COMCreatable (False) ]
Class TypeLibInfo
    Private Type TTypeLibInfo
        ITypeLib As ITypeLib
        typeInfos As TypeInfoCollection
    End Type

    Private this As TTypeLibInfo

    Public Sub New(ByVal pTypeLib As LongPtr)
        Logger.Log DebugLevel, "Creating TypeLibInfo for ITypeLib@" & pTypeLib
        Set Me.ITypeLib = ObjectFromObjPtr(pTypeLib)
    End Sub

    Public Property Get name() As String
        name = TypeLibHelper.getProjName(ITypeLib)
    End Property

    Public Property Get ITypeLib() As ITypeLib
        Assert Not this.ITypeLib Is Nothing, "TypeLibInfo.ITypeLib Is Nothing"
        Set ITypeLib = this.ITypeLib
    End Property

    Public Property Set ITypeLib(ByVal RHS As ITypeLib)
        Set this.ITypeLib = RHS
        Set this.typeInfos = New TypeInfoCollection(ITypeLib)
    End Property

    Public Function tryGetTypeInfoByName(ByVal name As String, ByRef outTI As ITypeInfo) As Boolean
        On Error GoTo logErr
        this.typeInfos.Find name, outTI
        Return True

        logErr:
        Logger.Log ErrorLevel, printf("Find raised error {}: {}", Err.Number, Err.Description)
        Return False
    End Function
End Class