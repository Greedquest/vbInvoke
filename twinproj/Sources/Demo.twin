Module Logging
    Public Property Get Logger() As LogManager
        Static isInitialised As Boolean
        If Not isInitialised Then
            LogManager.Register DebugLogger.Create("CallByNameEx", TraceLevel)
            isInitialised = True
        End If
        Set Logger = LogManager
    End Property
    
    Public Function printf(ByVal mask As String, ParamArray tokens() As Variant) As String
        Dim i As Long
        For i = 0 To UBound(tokens)
            Dim escapedToken As String
            escapedToken = Replace$(tokens(i), "}", "\}") 'only need to replace closing bracket since {i\} is already invalid
            If InStr(1, mask, "{}") <> 0 Then
                'use positional mode {}
                mask = Replace$(mask, "{}", escapedToken, Count:=1)
            
            Else
                'use indexed mode {i}
                mask = Replace$(mask, "{" & i & "}", escapedToken)
            
            End If
        Next
        mask = Replace$(mask, "\}", "}")
        printf = mask
    End Function
    
    Public Sub Assert(ByVal condition As Boolean, Optional ByVal message As String, Optional ByVal customLog As LogManager)
        If Not condition Then
            With If(customLog Is Nothing, Logger, customLog)
                Dim errorInfo As String = printf("Assert failed {}", message)
                .log FatalLevel, errorInfo
                Err.Raise 5, description:=errorInfo
            End With
        End If
    End Sub
End Module

''For reference here's what's in the VBA ExampleModule 
' Module ExampleModule
' 	Option Explicit

' 	Private Function Foo(ByVal bar As Long) As String
' 		Foo = "HelloWorld" & String(bar, "!")
' 	End Function

' 	Public Sub Baz()
' 		MsgBox "Hi!"
' 	End Sub

' 	Public Property Get val() As Double
' 		val = Rnd()
' 	End Property

' 	Public Property Let val(ByVal rhs As Double)
' 		Debug.Print "Ignoring val=" ; rhs
' 	End Property
' End Module


Module DllFunctions
	[ DllExport ]
    Public Function GetPublicAccessor(ByVal moduleName As String, ByVal proj As VBProject) As Object
        Logger.Log InfoLevel, "Invoking GetPublicAccessor"
        Return StdModuleAccessor(moduleName, proj, proj.Name)
    End Function
    
    ' [ DllExport ]
    ' Public Function GetPubPrivAccessor(ByVal moduleName As String, ByVal proj As VBProject) As Object
    '     Logger.Log InfoLevel, "Invoking GetPubPrivAccessor"
    '     Dim outPublicTI As ITypeInfo
    '     Dim outExtendedTL As ITypeLib
    '     Dim baseAccessor As Object = StdModuleAccessor(moduleName, proj, proj.Name, outPublicTI, outExtendedTL)
    ' End Function

End Module