Module Logging
    Public Property Get Logger() As LogManager
        Static isInitialised As Boolean
        If Not isInitialised Then
            LogManager.Register DebugLogger.Create("CallByNameEx", TraceLevel)
            isInitialised = True
        End If
        Set Logger = LogManager
    End Property
    
    Public Function printf(ByVal mask As String, ParamArray tokens() As Variant) As String
        Dim i As Long
        For i = 0 To UBound(tokens)
            Dim escapedToken As String
            escapedToken = Replace$(tokens(i), "}", "\}") 'only need to replace closing bracket since {i\} is already invalid
            If InStr(1, mask, "{}") <> 0 Then
                'use positional mode {}
                mask = Replace$(mask, "{}", escapedToken, Count:=1)
            Else
                'use indexed mode {i}
                mask = Replace$(mask, "{" & i & "}", escapedToken)
            End If
        Next
        mask = Replace$(mask, "\}", "}")
        printf = mask
    End Function
    
    Public Sub Assert(ByVal condition As Boolean, Optional ByVal message As String, Optional ByVal customLog As LogManager)
        If Not condition Then
            With If(customLog Is Nothing, Logger, customLog)
                Dim errorInfo As String = printf("Assert failed {}", message)
                .log FatalLevel, errorInfo
                Err.Raise 5, description:=errorInfo
            End With
        End If
    End Sub
End Module

Public Class GenericCaster(Of TSource, TDest)
	Private Declare PtrSafe Function ShallowCopy Lib "msvbvm60" Alias "__vbaObjSetAddref" (ByRef Dest As Any, ByVal pSourceInterface As LongPtr) As Long
    Public Property Let Cast(ByRef Dest As TDest, ByRef Source As TSource)
        ShallowCopy Dest, ObjPtr(Source)
    End Property
End Class

Module DllEntryPoints
    [ DllExport ]
    Public Function GetStandardModuleAccessor(ByVal moduleName As Variant, ByVal proj As VBProject) As Object
        Return API.GetStandardModuleAccessor(moduleName, proj)
    End Function

    [ DllExport ]
    Public Function GetExtendedModuleAccessor(ByVal moduleName As Variant, ByVal proj As VBProject, ByRef outPrivateTI As IUnknown) As Object
        Return API.GetExtendedModuleAccessor(moduleName, proj, outPrivateTI)
    End Function
End Module

[ AppObject ]
Public Class TypeLibEntryPoints
    Public Function GetStandardModuleAccessor(ByVal moduleName As String, ByVal proj As VBProject) As Object
    	Return API.GetStandardModuleAccessor(moduleName, proj)
    End Function
    
    Public Function GetExtendedModuleAccessor(ByVal moduleName As String, ByVal proj As VBProject, Optional ByRef outPrivateTI As ITypeInfo) As Object
    	Return API.GetExtendedModuleAccessor(moduleName, proj, outPrivateTI)
    End Function
End Class

Public Module API
    Public Function GetStandardModuleAccessor(ByVal moduleName As String, ByVal proj As VBProject) As Object
        Logger.Log InfoLevel, printf("Invoking GetStandardModuleAccessor on {}.{}", proj.Name, moduleName)
        Dim outPublicTI As ITypeInfo
        Dim outExtendedTL As TypeLibInfo
        Set GetStandardModuleAccessor = StdModuleAccessor(moduleName, proj, proj.Name, outPublicTI, outExtendedTL)
        Logger.Log InfoLevel, printf("Discarding ITypeInfo @{} + ITypeLib* @{}", ObjPtr(outPublicTI), ObjPtr(outExtendedTL.ITypeLib))
    End Function
  
    Public Function GetExtendedModuleAccessor(ByVal moduleName As String, ByVal proj As VBProject, ByRef outPrivateTI As ITypeInfo) As Object
        Logger.Log InfoLevel, printf("Invoking GetExtendedModuleAccessor on {}.{}", proj.Name, moduleName)
        
        'Get the base accessor (same as GetStandardModuleAccessor above) and keep the extended typelib
        ' which can be used to obtain private type info 
        Dim outPublicTI As ITypeInfo
        Dim outExtendedTL As TypeLibInfo
        Dim baseAccessor As Object = StdModuleAccessor(moduleName, proj, proj.Name, outPublicTI, outExtendedTL)
        Logger.Log InfoLevel, printf("Got ITypeInfo @{} + ITypeLib* @{}", ObjPtr(outPublicTI), ObjPtr(outExtendedTL.ITypeLib))
        
        'The StdModuleAccessor function does obtain the correct Extended ITypeInfo
        ' however it gets lost along the way (since VBA modules' ITypeInfo is double implemented public & private)
        'Therefore to guarantee we have the full type info, we can get it from the hidden typelib
        ' and be VERY CAREFUL not to call QueryInterface(IID_ITypeInfo) on it, since this would resolve
        ' back to the public-only type-info
        Dim memberID As MEMID
        Dim pcFound As Integer = 1 'to get only the first matching type-info which cshould be correct
        outExtendedTL.ITypeLib.FindName moduleName, 0, outPrivateTI, memberID, pcFound
        Assert pcFound = 1, printf("Unable to re-locate '{}' in the typelib", moduleName)
        Logger.Log InfoLevel, printf("{} PrivateITypeInfo @{}", pcFound, ObjPtr(outPrivateTI))
        
        'This tapes the full ITypeInfo to the StdModuleAccessor, allowing for IDispatch to handle the
        ' calls to both public and private methods
        Dim swapClass As SwapClassEX = New SwapClassEX(baseAccessor, outPrivateTI)
        Logger.Log TraceLevel, "Created swap class successfully"
        Return swapClass
    End Function
End Module

Private Class SwapClassEX
    Private Declare PtrSafe Function SysReAllocString Lib "oleaut32.dll" (ByVal pBSTR As LongPtr, Optional ByVal pszStrPtr As LongPtr) As Long
    Private ReadOnly BaseAccessor As vbInvoke.IDispatch 'don't use stdole since that doesn't have the methods visible
    Private ReadOnly ExtendedTypeInfo As ITypeInfo
 
    'DO NOT REORDER these 4 functions. Do NOT add new properties above them. This will alter VTable offsets
    Private Sub IDispatch_GetTypeInfoCount(ByRef outTICount As Long)
        Logger.Log TraceLevel, "IDispatch_GetTypeInfoCount"
        BaseAccessor.GetTypeInfoCount outTICount
        Logger.Log DebugLevel, "outTICount = " & outTICount
        Err.ReturnHResult = Err.LastHResult
    End Sub
    
    Private Sub IDispatch_GetTypeInfo( _ 
        ByVal tiIndex As Long, _
        ByVal lcid As Long, _
        ByRef outpITypeInfo As LongPtr)
        Logger.Log DebugLevel, printf("IDIspatch_GetTypeInfo {}", tiIndex)
        'TODO find a way to return extended typeinfo (objptr(ExtendedTypeInfo) doesn't help)
        On Error Resume Next
        BaseAccessor.GetTypeInfo tiIndex, lcid, outpITypeInfo
        Err.ReturnHResult = Err.LastHResult 'REVIEW maybe not needed...   
    End Sub
 
    Private Sub IDispatch_GetIDsOfNames(ByVal riid As LongPtr, ByVal namesArray As LongPtr, ByVal cNames As Long, ByVal lcid As Long, ByVal dispidArray As LongPtr)
        Logger.Log TraceLevel, "IDispatchVB_GetIDsOfNamesVB"
        Dim i As Long
        For i = 0 To cNames - 1
            Dim name As String = GetStrFromPtrW(MemLongPtr(namesArray + PTR_SIZE * i))
            Logger.Log DebugLevel, printf("Checking for {}", name)
            If funcs.Exists(name) Then
                MemLong(dispidArray + PTR_SIZE * i) = CLng(funcs(name))
            Else
                MemLong(dispidArray + PTR_SIZE * i) = -1 'unrecognised
                Err.ReturnHResult = DISPGetIDsOfNamesErrors.DISP_E_UNKNOWNNAME
            End If
        Next i
    End Sub

    Private Sub IDispatch_Invoke(ByVal dispIDMember As Long, ByVal riid As LongPtr, ByVal lcid As Long, ByVal wFlags As Integer, ByVal pDispParams As LongPtr, ByVal pVarResult As LongPtr, ByVal pExcepInfo As LongPtr, ByVal puArgErr As LongPtr)
        Logger.Log DebugLevel, printf("IDispatchVB_InvokeVB dispid={}", dispIDMember)
        Dim accessor As IDispatch = If(dispIDMember = -4, funcs, BaseAccessor)
        accessor.Invoke(dispIDMember, _
            riid, lcid, wFlags, _
            pDispParams, _
            pVarResult, pExcepInfo, puArgErr)
        Err.ReturnHResult = Err.LastHResult 'REVIEW maybe not needed...  
    End Sub
    
    Private Sub New(ByVal accessor As IDispatch, ByRef moduleTypeInfo As ITypeInfo)
        Logger.Log TraceLevel, "Creating SwapClass"
        Set BaseAccessor = accessor
        Dim caster As New GenericCaster(Of ITypeInfo, ITypeInfo)
        caster.Cast(ExtendedTypeInfo) = moduleTypeInfo
        Logger.Log DebugLevel, printf("Stored private ti@{}, supplied@{}", ObjPtr(ExtendedTypeInfo), ObjPtr(moduleTypeInfo))
        
        Dim pDefaultVTable As LongPtr = MemLongPtr(ObjPtr(Me))
        'AddressOf classmethod fails as it is per instance temp stub fn not the VTable function
        Logger.Log TraceLevel, "About to perform VT swap"
        ' CopyMemory pDefaultVTable + PTR_SIZE * 3, pDefaultVTable + PTR_SIZE * 7, 4 * PTR_SIZE
        MemLongPtr(pDefaultVTable + PTR_SIZE * 3) = MemLongPtr(pDefaultVTable + PTR_SIZE * 7)   'AddressOf IDispatch_GetTypeInfoCount  
        MemLongPtr(pDefaultVTable + PTR_SIZE * 4) = MemLongPtr(pDefaultVTable + PTR_SIZE * 8)   'AddressOf IDispatch_GetTypeInfo
        MemLongPtr(pDefaultVTable + PTR_SIZE * 5) = MemLongPtr(pDefaultVTable + PTR_SIZE * 9)   'AddressOf IDispatch_GetIDsOfNames
        MemLongPtr(pDefaultVTable + PTR_SIZE * 6) = MemLongPtr(pDefaultVTable + PTR_SIZE * 10)  'AddressOf IDispatch_Invoke
        Logger.Log TraceLevel, printf("VT swap complete {}<-{} ({}[{}])", pDefaultVTable + PTR_SIZE * 3, pDefaultVTable + PTR_SIZE * 7, 4 * PTR_SIZE, PTR_SIZE)

    End Sub

    Private Property Get funcs() As Dictionary
        'NOTE cached assuming you cannot modify typeinfo at all at runtime (i.e. you cannot edit a module while vba is running)
        'TODO Check if this holds True for VBComponents.Add
        Static result As Dictionary
        If result Is Nothing Then Set result = TypeInfoHelper.GetFuncDispidFromTypeInfo(ExtendedTypeInfo)
        Set funcs = result
    End Property

    'Returns a copy of a null-terminated Unicode string (LPWSTR/LPCWSTR) from the given pointer
    Private Function GetStrFromPtrW(ByVal Ptr As LongPtr) As String
        SysReAllocString VarPtr(GetStrFromPtrW), Ptr
    End Function
End Class