Module Logging
    Public Property Get Logger() As LogManager
        Static isInitialised As Boolean
        If Not isInitialised Then
            LogManager.Register DebugLogger.Create("CallByNameEx", TraceLevel)
            isInitialised = True
        End If
        Set Logger = LogManager
    End Property
End Module

' Module ExampleModule
' 	Option Explicit

' 	Private Function Foo(ByVal bar As Long) As String
' 		Foo = "HelloWorld" & String(bar, "!")
' 	End Function

' 	Public Sub Baz()
' 		MsgBox "Hi!"
' 	End Sub

' 	Public Property Get val() As Double
' 		val = Rnd()
' 	End Property

' 	Public Property Let val(ByVal rhs As Double)
' 		Debug.Print "Ignoring val=" ; rhs
' 	End Property
' End Module


Module Experiments

   


	Private test_val As Double

	Public Sub testCallingPrivateMethod(ByVal wb As Excel.Workbook)
		Dim exampleMod As Object
		Set exampleMod = GetFancyAccessor(wb.VBProject, "ExampleModule")
		Debug.Assert exampleMod.Foo(2) = "HelloWorld!!"
	End Sub

	Public Sub testCallingErrorMethod(ByVal wb As Excel.Workbook)
		Dim thisMod As Object
		Set thisMod = GetFancyAccessor(wb.VBProject, "Experiments")
		On Error Resume Next 'untrappable errors unfortunately, but also does not crash which is very good
		thisMod.raisesError
		Debug.Assert Err.Number = 5
	End Sub

	Public Sub testTerminateDoesNotCrash(ByVal wb As Excel.Workbook)
		GetFancyAccessor(wb.VBProject, "Experiments").terminate
		Debug.Assert False 'unreachable
	End Sub

	Public Sub testModuleReflection(ByVal wb As Excel.Workbook)
		Dim info As IModuleInfo
		Set info = GetFancyAccessor(wb.VBProject, "ExampleModule")
		Debug.Assert Join(info.ModuleFuncInfoMap.Keys()) = Join(Array("Foo", "Baz", "val")) 'val appears twice in module but only once here since it is a Let/Set
	End Sub

	Public Sub testProps(ByVal wb As Excel.Workbook)
		test_val = 9
		With GetFancyAccessor(wb.VBProject, "Experiments")
			.val = 1.7
			Debug.Assert .val = 1.7
		End With
	End Sub

	Private Sub raisesError()
		Err.Raise 5
	End Sub

	Private Sub terminate()
		End
	End Sub

	Public Property Get val() As Double
		val = test_val
	End Property

	Public Property Let val(ByVal rhs As Double)
		test_val = rhs
	End Property
End Module